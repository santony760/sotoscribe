/* Simplified docx.js implementation for SotoScribe */
(function(global) {
  const docx = {
    Document: function(options) {
      this.sections = [];
      this.styles = options?.styles || {};
      this.title = options?.title || "SotoScribe Document";
      this.description = options?.description || "";
      
      this.addSection = function(section) {
        this.sections.push(section);
      };
    },
    
    Paragraph: function(options) {
      this.text = options?.text || '';
      this.heading = options?.heading || null;
      this.alignment = options?.alignment || null;
      this.children = options?.children || [];
      this.style = options?.style || null;
      this.spacing = options?.spacing || null;
      this.border = options?.border || null;
    },
    
    TextRun: function(options) {
      this.text = options?.text || '';
      this.bold = options?.bold || false;
      this.italics = options?.italics || false;
      this.size = options?.size || null;
      this.color = options?.color || null;
    },
    
    HeadingLevel: {
      HEADING_1: 'Heading1',
      HEADING_2: 'Heading2'
    },
    
    AlignmentType: {
      CENTER: 'center',
      LEFT: 'left',
      RIGHT: 'right'
    },
    
    BorderStyle: {
      SINGLE: 'single'
    },
    
    ImageRun: function(options) {
      this.data = options?.data || null;
      this.transformation = options?.transformation || null;
    },
    
    Packer: {
      toBlob: async function(doc) {
        try {
          // Create a simple Office XML document structure
          // This is a simplified representation - a real DOCX would be more complex
          let docContent = {
            document: {
              title: doc.title,
              sections: []
            }
          };
          
          // Process each section
          if (doc.sections && doc.sections.length > 0) {
            doc.sections.forEach(section => {
              let sectionData = {
                children: []
              };
              
              // Process all children (usually paragraphs)
              if (section.children && section.children.length > 0) {
                section.children.forEach(child => {
                  // Handle paragraphs with text directly
                  if (child.text) {
                    sectionData.children.push({
                      type: 'paragraph',
                      text: child.text,
                      style: child.style,
                      heading: child.heading
                    });
                  } 
                  // Handle paragraphs with TextRuns or other complex children
                  else if (child.children && child.children.length > 0) {
                    let paragraphData = {
                      type: 'paragraph',
                      style: child.style,
                      heading: child.heading,
                      content: []
                    };
                    
                    child.children.forEach(grandchild => {
                      if (grandchild.text) {
                        paragraphData.content.push({
                          text: grandchild.text,
                          bold: grandchild.bold,
                          italics: grandchild.italics,
                          size: grandchild.size,
                          color: grandchild.color
                        });
                      } else if (grandchild.data) {
                        // This would be an image or other non-text element
                        paragraphData.content.push({
                          type: 'image',
                          data: '[IMAGE DATA]' // We don't actually store image data in this simplified version
                        });
                      }
                    });
                    
                    sectionData.children.push(paragraphData);
                  }
                });
              }
              
              docContent.document.sections.push(sectionData);
            });
          }
          
          // Convert to JSON with nice formatting for debugging
          const jsonContent = JSON.stringify(docContent, null, 2);
          
          // In a real implementation, this would create an actual DOCX file
          // For simplicity, we're just creating a JSON blob with the document structure
          const blob = new Blob([jsonContent], {
            type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
          });
          
          return blob;
        } catch (error) {
          console.error("Error creating document:", error);
          throw error;
        }
      }
    }
  };
  
  // Make it available globally
  global.docx = docx;
})(typeof window !== 'undefined' ? window : this);